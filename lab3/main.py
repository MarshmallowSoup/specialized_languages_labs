'''
Лабораторна робота № 3. Розробка ASCII ART генератора для візуалізації текстових даних 

Мета створення додатка Генератора ASCII-арту.
План роботи

Завдання 1: Введення користувача
Створіть Python-програму, яка приймає введення користувача для слова або фрази, яку треба  перетворити в ASCII-арт.

Завдання 2: Бібліотека ASCII-арту
Інтегруйте бібліотеку ASCII-арту (наприклад, pyfiglet або art) у вашу програму для генерації ASCII-арту з введення користувача

Завдання 3: Вибір шрифту
Дозвольте користувачам вибирати різні стилі шрифтів для свого ASCII-арту. Надайте список доступних шрифтів та дозвольте їм вибрати один.

Завдання 4: Колір тексту
Реалізуйте опцію вибору користувачем кольору тексту для їхнього ASCII-арту. Підтримуйте основний вибір кольорів (наприклад, червоний, синій, зелений).

Завдання 5: Форматування виводу
Переконайтеся, що створений ASCII-арт правильно відформатований та вирівнюється на екрані для зручності читання.

Завдання 6: Збереження у файл
Додайте функціональність для збереження створеного ASCII-арту у текстовому файлі, щоб користувачі могли легко завантажувати та обмінюватися своїми творіннями.

Завдання 7: Розмір ARTу
Дозвольте користувачам вказувати розмір (ширина і висота) ASCII-арту, який вони хочуть створити. Масштабуйте текст відповідно.

Завдання 8: Вибір символів
Дозвольте користувачам вибирати символи, які вони хочуть використовувати для створення ASCII-арту (наприклад, '@', '#', '*', тощо).

Завдання 9: Функція попереднього перегляду
Реалізуйте функцію попереднього перегляду, яка показує користувачам попередній перегляд їхнього ASCII-арту перед остаточним збереженням.

Завдання 10: Інтерфейс, зрозумілий для користувача
Створіть зручний для користувача інтерфейс командного рядку для додатка, щоб зробити його інтуїтивно зрозумілим та легким у використанні.

Висновки: Виконуючи ці завдання, студенти створять універсальний Генератор ASCII-арту, який дозволить користувачам налаштовувати свої творіння з різними шрифтами, кольорами, розмірами та символами. Проект надасть практичний досвід роботи з введенням користувача, зовнішніми бібліотеками, роботою з файлами та дизайном інтерфейсу користувача в Python.
'''
import pyfiglet
from termcolor import colored

# Функція для вибору шрифту
def choose_font():
    fonts = pyfiglet.FigletFont.getFonts()[:5]  # Обмежуємо кількість шрифтів до 5

    print("Доступні шрифти:")
    for index, font in enumerate(fonts, 1):
        print(f"{index}. {font}")

    while True:
        try:
            font_choice = int(input("Виберіть номер шрифту: "))
            if 1 <= font_choice <= len(fonts):
                return fonts[font_choice - 1]
            else:
                print("Некоректний вибір. Спробуйте ще раз.")
        except ValueError:
            print("Некоректний ввід. Введіть номер шрифту.")

# Функція для вибору кольору
def choose_color():
    colors = ['red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']

    print("Доступні кольори:")
    for index, color in enumerate(colors, 1):
        print(f"{index}. {color}")

    while True:
        try:
            color_choice = int(input("Виберіть номер кольору: "))
            if 1 <= color_choice <= len(colors):
                return colors[color_choice - 1]
            else:
                print("Некоректний вибір. Спробуйте ще раз.")
        except ValueError:
            print("Некоректний ввід. Введіть номер кольору.")

# Введення користувача
user_input = input("Введіть слово або фразу для перетворення в ASCII-арт: ")

# Вибір шрифту
selected_font = choose_font()

# Вибір кольору
selected_color = choose_color()

# Використовуємо бібліотеку pyfiglet для створення ASCII-арт з обраним шрифтом
ascii_art = pyfiglet.figlet_format(user_input, font=selected_font)

# Використовуємо бібліотеку termcolor для надання кольору тексту
colored_ascii_art = colored(ascii_art, color=selected_color)

# Виводимо кольоровий ASCII-арт на екран
print(colored_ascii_art)
